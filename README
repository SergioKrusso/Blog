1. Открываем проект в IDE. Устанавливаем (если не установлен) flask  >>> pip install flask. Запускаем файл main.py
2. Тестируем метод POST.
Открываем приложение Postman. Заходим в Collections - RESTW API basics CRUD, test and variable - Post data.
Слева напротив POST указываем адрес localhost:5000/posts. Строчкой ниже выбираем вкладку "body", параметры RAW и JSON.
Ниже вводим тестируемые данные, например:
{
    "title": "Название поста", "content": "Текст поста", "author" : "@someone"
}

Если программа работает правильно, в окне ниже получаем сообщение:

{
    "message": "Пост успешно создан",
    "post": {
        "author": "@someone",
        "content": "Текст поста",
        "id": 1,
        "title": "Название поста"
    }
}

Повторим ввод данных, теперь id должен поменяться на 2.

3.Тестируем метод GET.

В Postman выбираем вкладку GET. Указываем адрес localhost:5000/posts, получаем список постов, запостенных при тестировании метода POST.
Чтобы вывести пост по его id, необходимо добавить значение id к url, например для id=2: localhost:5000/posts/2.

4. Тестируем метод PUT.

В Postman выбираем из предварительно залитых постов тот, который будем редактировать (добавляем к url его id номер).
Пост выведется в нижнем окне. Выбираем метод PUT, вносим изменения на вкладке "body", жмём SEND.
В нижнем окне отобразится сообщение "Пост изменён" и выведется сам изменённый пост.
Если поста с таким id не существует, выведется сообщение: "Пост не найден".


5. Тестируем метод DELETE.

В Postman выбираем из предварительно залитых постов тот, который хотим удалить (добавляем к url его id номер).
Выбираем вкладку DELETE и нажимаем SEND. Получаем сообщение "Пост удалён".
Если поста с таким id не существует, выведется сообщение: "Пост не найден".

6. Тестируем комментарии.

В Postman предварительно постим несколько постов, как в пункте 2. Вкладку POST не меняем.
Слева напротив POST указываем адрес localhost:5000/comments. Строчкой ниже выбираем вкладку "body", параметры RAW и JSON.
Ниже вводим тестируемые данные, например:

{
    "post_id": "1", "content": "Интересно!"
}

Если программа работает правильно, в окне ниже получаем сообщение:

{
    "comment": {
        "content": "Интересно!",
        "id": 1,
        "post_id": "1"
    },
    "message": "Комментарий успешно создан"

Методы GET, PUT и DELETE тестируем аналогично тому, как мы их тестировали на сущности Post,
только на url localhost:5000/comments.
